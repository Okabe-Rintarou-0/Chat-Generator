from collections import defaultdict
from os.path import dirname, join, realpath
from unittest.mock import Mock
import smfile_parser as parse
import unittest

class TestParser(unittest.TestCase):
    def test_format_file_name(self):
        TEST_FILE_FORMATTED = "test-file_"
        TEST_FILE_WITH_RANDOM_CHARS = "/|`:t~;E?]@[sT(->f.!+i<.#L,)$=e%^_^*.ext"
        self.assertEqual(parse.format_file_name(TEST_FILE_WITH_RANDOM_CHARS), TEST_FILE_FORMATTED)

    def test_convert_note(self):
        self.assertEqual(parse.convert_note("MKLF"), "0000")
        self.assertEqual(parse.convert_note("K42L"), "0120")

    def test_calculate_timing(self):
        MEASURE = ['1000', None, None, '1100']
        MEASURE_INDEX = 2
        BPM = 200.000
        OFFSET = 0.009

        NOTES_AND_TIMINGS = parse.calculate_timing(MEASURE, MEASURE_INDEX, BPM, OFFSET)
        self.assertEqual(NOTES_AND_TIMINGS, ["1000 2.391", "1100 3.291"])

    def test_parse_sm(self):
        SM_FILE_PARSABLE = join(dirname(realpath(__file__)), 'parserTest/sm_file_parsable.sm')
        PARSED_DATA = parse.parse_sm(SM_FILE_PARSABLE)
        
        self.assertEqual(PARSED_DATA['notes'], {'Challenge': ['0011 1.569157894736842', '1000 1.8849473684210527', '2001 2.200736842105263', '0100 2.5165263157894735', '0010 2.832315789473684', '1000 2.9902105263157894', '0001 3.1481052631578947', '1000 3.306', '0100 3.4638947368421054', '0010 3.6217894736842107', '0001 3.7796842105263155', '1000 3.937578947368421', '0001 4.095473684210526', '1000 4.174421052631579', '0010 4.253368421052631', '0100 4.332315789473684', '0001 4.411263157894736', '1000 4.490210526315789', '0001 4.569157894736842', '0010 4.648105263157895', '0100 4.727052631578947', '1000 4.806', '0100 4.884947368421052', '0010 4.963894736842105', '0001 5.042842105263158', '0010 5.121789473684211', '0100 5.200736842105263', '1000 5.279684210526315', '0001 5.358631578947368', '0100 5.398105263157895', '0001 5.43757894736842', '1000 5.477052631578947', '0001 5.5165263157894735', '0100 5.556', '0001 5.595473684210526', '1000 5.634947368421052', '0001 5.674421052631579', '0010 5.713894736842105', '0100 5.753368421052631', '0010 5.792842105263158', '0001 5.832315789473684', '0010 5.871789473684211', '0100 5.911263157894736', '0010 5.950736842105263', '0001 5.990210526315789', '1000 6.029684210526315', '0010 6.069157894736842', '1000 6.108631578947368', '0001 6.148105263157895', '0100 6.18757894736842', '0010 6.227052631578947', '1000 6.2665263157894735', '0001 6.306', '0010 6.345473684210526', '0100 6.384947368421052', '0010 6.424421052631579', '0001 6.4638947368421045', '1000 6.503368421052631', '0010 6.542842105263158', '0100 6.582315789473684', '0001 6.621789473684211', '1000 6.6415263157894735', '0001 6.661263157894737', '0010 6.681', '0100 6.700736842105263', '0010 6.720473684210527', '0001 6.740210526315789', '1000 6.759947368421053', '0010 6.779684210526316', '0100 6.799421052631579', '0001 6.8191578947368425', '1000 6.838894736842105', '0001 6.858631578947368', '0010 6.878368421052632', '0100 6.898105263157895', '1000 6.917842105263158', '0100 6.937578947368421', '1000 6.957315789473684', '0001 6.977052631578948', '0100 6.996789473684211', '0010 7.0165263157894735', '1000 7.036263157894737', '0001 7.056', '1000 7.075736842105263', '0100 7.095473684210527', '0010 7.115210526315789', '0001 7.134947368421053', '1000 7.154684210526316', '0001 7.174421052631579', '0100 7.1941578947368425', '0010 7.213894736842105', '1000 7.233631578947368', '0001 7.253368421052632', '0010 7.273105263157895', '0001 7.292842105263158', '1000 7.312578947368421', '0001 7.332315789473684', '0010 7.352052631578948', '0001 7.371789473684211', '1000 7.3915263157894735', '0001 7.411263157894737', '0100 7.431', '0010 7.450736842105263', '0100 7.470473684210527', '0001 7.490210526315789', '0100 7.509947368421053', '0010 7.529684210526316', '0100 7.549421052631579', '0001 7.5691578947368425', '1000 7.588894736842105', '0100 7.608631578947368', '0010 7.628368421052632', '0001 7.648105263157895', '1000 7.667842105263158', '0001 7.687578947368421', '0100 7.707315789473684', '0010 7.727052631578947', '1000 7.746789473684211', '0001 7.7665263157894735', '1000 7.786263157894737', '0100 7.806', '0010 7.825736842105264', '0100 7.845473684210527', '1000 7.865210526315789'], 'Hard': ['1000 0.306', '1000 0.6217894736842104', '0001 0.9375789473684211', '0001 1.2533684210526315'], 'Medium': ['1000 0.306', '1000 0.6217894736842104', '0001 0.9375789473684211', '0001 1.2533684210526315']})
        self.assertEqual(PARSED_DATA['title'], 'sm_file_parsable')
        self.assertEqual(PARSED_DATA['offset'], -0.306)
        self.assertEqual(PARSED_DATA['bpm'], 190.0)

    def test_parse_sm_with_stop(self):
        SM_FILE_WITH_STOP = join(dirname(realpath(__file__)), 'parserTest/sm_file_with_stop.sm')  
        self.assertRaises(ValueError, parse.parse_sm, SM_FILE_WITH_STOP)

    def test_parse_sm_with_multiple_bpm(self):
        SM_FILE_WITH_MULTIPLE_BPM = join(dirname(realpath(__file__)), 'parserTest/sm_file_with_multiple_bpm.sm')
        self.assertRaises(ValueError, parse.parse_sm, SM_FILE_WITH_MULTIPLE_BPM)

if __name__ == '__main__':
    unittest.main()
